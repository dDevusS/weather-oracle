#!/bin/bash

######################
# deploy manager 2.0 #
# by dDevusS         #
######################

#####################################################################################################
#                                         SETUP                                                     #
# 1. Set PROJECT_NAME.                                                                              #
# 2. Set MANAGER_FILE. It must be name of the manager (default manager)                             #
# 3. Set REMOTE_REPOSITORY.                                                                         #
# 4. Set PROJECT_VERSION. For example, "1.0" or "latest".                                           #
# 5. Set DOCKER_IMAGE name. "developer_name/project_name(lower case with '_'):${PROJECT_VERSION}"   #
# 6. Set COMPOSE_FILE name.                                                                         #
# 7. Set README_PATH. It might be link to github repository of your project with README file.       #
#                                                                                                   #
#####################################################################################################

PROJECT_NAME="weather-oracle"
LOCAL_DIR=$(pwd)
REPOSITORY_DIR=${LOCAL_DIR}/${PROJECT_NAME}
MANAGER_FILE="manager"
REMOTE_REPOSITORY="https://github.com/dDevusS/${PROJECT_NAME}.git"

PROJECT_VERSION="1.0"
DOCKER_IMAGE="dDevusS/image_name:${PROJECT_VERSION}"
COMPOSE_FILE="docker-compose.yml"
README_PATH="https://github.com/dDevusS/weather-oracle"

# Function for checking existing image and creating if not exist.
init_image() {
    if [[ -n $(docker images -q ${DOCKER_IMAGE}) ]]; then
        echo "Docker image \"${DOCKER_IMAGE}\" already exists."
        exit 0
    else
        echo "Docker image \"${DOCKER_IMAGE}\" does not exist. Preparing to build the image..."

        if ! search_repository; then
          clone_repository
        fi

        echo "Building the image ..."
        docker-compose -f "${COMPOSE_FILE}" build || {
          echo "Error: Failed to build Docker image. Please, look into README on ${README_PATH}";
          exit 1;
          }
    fi
}

# Clone repository.
clone_repository() {
    echo "Cloning the repository ${REMOTE_REPOSITORY}"
    git clone "${REMOTE_REPOSITORY}" || {
      echo "Error: failed to clone from ${REMOTE_REPOSITORY}.";
      echo "Please, look into README on ${README_PATH}.";
      exit 1;
    }
}

# Searching local repository.
search_repository() {
    echo "Searching repository on ${LOCAL_DIR} ..."

    if [[ $( pwd | xargs basename ) == "${PROJECT_NAME}" ]]; then
        REPOSITORY_DIR=$(pwd)
        echo "Found local repository on ${REPOSITORY_DIR}"
    elif ls | grep -x "${PROJECT_NAME}"; then
        echo "Found local repository on ${REPOSITORY_DIR}"
    else
        echo "Local repository hasn't been found."
        return 1
    fi
}

# Validation port value.
validate_port() {
    local port="$1"
    if ! [[ "${port}" =~ ^[0-9]+$ ]]; then
        echo "Error: Port value must be a number."
        exit 1
    fi

    if ((port < 1 || port > 65535)); then
        echo "Error: Port value must be from 1 to 65535."
        exit 1
    fi
}

# Function for running Docker Compose.
run_docker_compose() {
    local port=8080
    if [[ "$1" = "--port" ]] && validate_port "$2" ; then
      port="$2"
    fi

    echo "Running Docker Compose on port $port..."
    docker-compose -f "${COMPOSE_FILE}" up -d || {
      echo "Error: Failed to start Docker Compose.";
      exit 1;
      }
}

# Function for stopping Docker Compose.
stop_docker_compose() {
    echo "Stopping Docker Compose..."
    docker-compose -f "${COMPOSE_FILE}" down || {
      echo "Error: Failed to stop Docker Compose.";
      exit 1;
      }
}

# Clean repository or image and container.
clean() {
    case $1 in
        "")
          delete_repository
          ;;
        --all)
          delete_all
          ;;
        --docker)
          clean_docker
          ;;
        *)
          echo "Error: $1 is an invalid command. Please, use --help for instructions."
          exit 1
    esac
}

# Delete repository.
delete_repository() {
    echo "Preparing to delete local repository ..."
    if search_repository; then
      if [[ $(pwd) == "${REPOSITORY_DIR}" ]]; then
        echo "Moving manager file ..."
        cp -u "$0" ..
        cd ..
        echo "Deleting repository ..."
        rm -rf "${REPOSITORY_DIR}"
      else
        echo "Deleting repository ..."
        rm -rf "${REPOSITORY_DIR}"
      fi
      echo "Local repository ${REPOSITORY_DIR} was deleted."
    fi
}

# Delete image, container, repository and manager file.
delete_all() {
  echo "Preparing to delete all files for ${PROJECT_NAME}"
  clean_docker
  delete_repository

    read -p "Are you sure you want to delete ${MANAGER_FILE} script? [y/N] " response
    if [[ "${response}" =~ ^([yY][eE][sS]|[yY])$ ]]; then
      rm "$0"
      echo "${MANAGER_FILE} has been deleted."
    else
      echo "Deletion of ${MANAGER_FILE} cancelled."
    fi

  echo "${PROJECT_NAME} has been deleted."
}

# Delete image and container if exist.
clean_docker() {
  echo "Preparing to remove the containers and images ..."

  docker-compose -f "${COMPOSE_FILE}" down --rmi all --volumes --remove-orphans || {
    echo "Error: Failed to clean Docker Compose.";
    exit 1;
    }

  echo "Containers and images have been deleted."
}

# Function for getting help.
show_help() {
    echo "Usage: $0 {init|run [--port PORT_NUMBER]|stop|clean [--all|--docker]|--help}"
    echo "Options:"
    echo "  init        Clone repository and build Docker image"
    echo "  run         Run Docker Compose"
    echo "  --port      Specify port number"
    echo "  stop        Stop Docker Compose"
    echo "  clean       Remove local repository"
    echo "  --all       Remove local repository, images, containers, and manager file"
    echo "  --docker    Remove images and containers"
    echo "  --help      Get help"
}

# Checking arguments.
case $1 in
    init)
        init_image
        ;;
    run)
        run_docker_compose "$2" "$3"
        ;;
    stop)
        stop_docker_compose
        ;;
    clean)
        clean "$2"
        ;;
    --help)
        show_help
        ;;
    *)
        echo "Invalid argument. Use '--help' for usage instructions."
        exit 1
        ;;
esac

